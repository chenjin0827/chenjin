<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <properties>
        <property name="LOG_HOME">D:/logs</property>
        <property name="FILE_NAME">tim</property>
    </properties>
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy_MM_dd-HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </Console>
        <!--<File name="TimFile" fileName="D:/logs/tim.log">
            <PatternLayout pattern="%d{yyyy_MM_dd-HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </File>-->
        <RollingRandomAccessFile name="InfoFile" fileName="${LOG_HOME}/info.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/info-%d{yyyy-MM-dd HH}-%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <!--onMatch指的是日志级别大于等于level时的操作，onMismatch表示日志级别小于level时的操作。因此，如果我们想设置日志级别为info，根据日志等级关系：
            off>fatal>error>warn>info>debug>trace>all， 只需要设置大于等于warn的日志级别拒绝小于warn的日志级别放行，
            再加上，大于等于info的日志级别放行和小于info的日志级别拒绝，即可以得到只打印info的日志到相应的文件中。-->
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" /><!--此处和filePattern里面配合使用 %d{yyyy-MM-dd HH}-%i.log 每一小时生成一个文件-->
                <SizeBasedTriggeringPolicy size="10 MB" /><!--定当文件体积大于size指定的值是，触发Rolling。-->
            </Policies>
            <DefaultRolloverStrategy max="20" /><!--指定最多保存的文件个数-->
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="DebugFile" fileName="${LOG_HOME}/debug.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/debug-%d{yyyy-MM-dd HH}-%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <!--onMatch指的是日志级别大于等于level时的操作，onMismatch表示日志级别小于level时的操作。因此，如果我们想设置日志级别为info，根据日志等级关系：
            off>fatal>error>warn>info>debug>trace>all， 只需要设置大于等于warn的日志级别拒绝小于warn的日志级别放行，
            再加上，大于等于info的日志级别放行和小于info的日志级别拒绝，即可以得到只打印info的日志到相应的文件中。-->
            <Filters>
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" /><!--此处和filePattern里面配合使用 %d{yyyy-MM-dd HH}-%i.log 每一小时生成一个文件-->
                <SizeBasedTriggeringPolicy size="10 MB" /><!--定当文件体积大于size指定的值是，触发Rolling。-->
            </Policies>
            <DefaultRolloverStrategy max="20" /><!--指定最多保存的文件个数-->
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="ErrorFile" fileName="${LOG_HOME}/error.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/error-%d{yyyy-MM-dd HH}-%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <!--onMatch指的是日志级别大于等于level时的操作，onMismatch表示日志级别小于level时的操作。因此，如果我们想设置日志级别为info，根据日志等级关系：
            off>fatal>error>warn>info>debug>trace>all， 只需要设置大于等于warn的日志级别拒绝小于warn的日志级别放行，
            再加上，大于等于info的日志级别放行和小于info的日志级别拒绝，即可以得到只打印info的日志到相应的文件中。-->
            <Filters>
                <ThresholdFilter level="fatal" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" /><!--此处和filePattern里面配合使用 %d{yyyy-MM-dd HH}-%i.log 每一小时生成一个文件-->
                <SizeBasedTriggeringPolicy size="10 MB" /><!--定当文件体积大于size指定的值是，触发Rolling。-->
            </Policies>
            <DefaultRolloverStrategy max="20" /><!--指定最多保存的文件个数-->
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="FatalFile" fileName="${LOG_HOME}/fatal.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/fatal-%d{yyyy-MM-dd HH}-%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <!--onMatch指的是日志级别大于等于level时的操作，onMismatch表示日志级别小于level时的操作。因此，如果我们想设置日志级别为info，根据日志等级关系：
            off>fatal>error>warn>info>debug>trace>all， 只需要设置大于等于warn的日志级别拒绝小于warn的日志级别放行，
            再加上，大于等于info的日志级别放行和小于info的日志级别拒绝，即可以得到只打印info的日志到相应的文件中。-->
            <Filters>
                <ThresholdFilter level="fatal" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" /><!--此处和filePattern里面配合使用 %d{yyyy-MM-dd HH}-%i.log 每一小时生成一个文件-->
                <SizeBasedTriggeringPolicy size="10 MB" /><!--定当文件体积大于size指定的值是，触发Rolling。-->
            </Policies>
            <DefaultRolloverStrategy max="20" /><!--指定最多保存的文件个数-->
        </RollingRandomAccessFile>
    </Appenders>
    <Loggers>
        <!--<Logger name="com.test.TestLog4j2" level="error" additivity="true">
            <AppenderRef ref="TimFile" />
        </Logger>-->
        <Root level="trace">
            <AppenderRef ref="Console" />
            <AppenderRef ref="DebugFile" />
            <AppenderRef ref="InfoFile" />
            <AppenderRef ref="ErrorFile" />
            <AppenderRef ref="FatalFile" />
        </Root>
    </Loggers>
</Configuration>
